{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                Boolean Routines
--------------------------------------------------------------------------------
 * function StrIsBool(s: string): Boolean;
 * function TBoATrueAmount(arr: TBoolArray): Integer; 
 * function TBoAPos(bool: Boolean; arr: TBoolArray): Integer;
 * function TBoALastPos(bool: Boolean; arr: TBoolArray): Integer;
 * function TBoAPositions(bool: Boolean; arr: TBoolArray): TIntArray;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrIsBool(s: string): Boolean;
Contributors: Janilabo
Description: Returns true if s is Boolean.
             Examples: 'True' = TRUE; 'False' = TRUE; ..everything else returns FALSE.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrIsBool(s: string): Boolean;
begin
  s := Lowercase(s);
  Result := ((s = 'true') or (s = 'false')); 
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoATrueAmount(arr: TBoolArray): Integer;
Contributors: Wanted, Freddy
Description: Results the amount of true booleans in boolean array.
Date Created: December 12th, 2011. By Wanted
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoATrueAmount(arr: TBoolArray): Integer;
var
  I, H: Integer;
begin
  Result := 0;
  H := High(arr);
  for I := 0 to H do
    if (arr[I]) then
      Inc(Result);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoAPos(bool: Boolean; arr: TBoolArray): Integer;
Contributors: Janilabo                        
Description: Returns the position of bool in arr.
             Result will be -1, if bool is not found in arr.
             Example: TBoAPos(False, [True, True, False]) returns 2            
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoAPos(bool: Boolean; arr: TBoolArray): Integer;
var
  h: Integer;
begin
  h := High(arr);
  for Result := 0 to h do
    if (arr[Result] = bool) then
      Exit;
  Result := -1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoALastPos(bool: Boolean; arr: TBoolArray): Integer;
Contributors: Janilabo                        
Description: Returns the last position of bool in arr.
             Result will be -1, if bool is not found in arr.
             Example: TBoALastPos(True, [True, True, False]) returns 1              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoALastPos(bool: Boolean; arr: TBoolArray): Integer;
var
  h: Integer;
begin
  h := High(arr);
  for Result := h downto 0 do
    if (arr[Result] = bool) then
      Exit;
  Result := -1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBoAPositions(bool: Boolean; arr: TBoolArray): TIntArray;
Contributors: Janilabo                        
Description: Returns all positions of bool in arr.
             Example: TBoAPositions(True, [True, False, True]) returns  [0, 2]              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBoAPositions(bool: Boolean; arr: TBoolArray): TIntArray;
var
  i, rC, h: Integer;
begin
  h := High(arr);
  SetLength(Result, (h + 1));
  for i := 0 to h do
    if (arr[i] = bool) then
    begin
      Result[rC] := i;
      inc(rC);
    end;
  SetLength(Result, rC);
end;                                   

 