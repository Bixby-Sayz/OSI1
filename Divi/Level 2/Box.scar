{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Box Routines
--------------------------------------------------------------------------------
 * procedure ClearBox(var bx: TBox);
 * procedure FixBox(var bx: TBox);
 * function  BoxContains(inner_bx, outer_bx: TBox): Boolean;
 * function  ValidBox(bx: TBox): Boolean;
 * function  SameBoxes(bx1, bx2: TBox): Boolean;
 * procedure ShrinkBox(var bx: TBox; sSize: Integer);
 * procedure ResizeBox(var bx: TBox; pixels, method: Integer);
 * procedure BoxDimensions(bx: TBox; var w, h: Integer);
 * procedure BoxCentralization(var inner_bx: TBox; outer_bx: TBox; method: TMeasurementUnits);
 * function  CountBoxesInBoxBySize(bx: TBox; width, height: Integer): Integer;
 * function  GetBoxesInBoxBySize(bx: TBox; width, height: Integer): TBoxArray;
 * function  TBABounds(TBA: TBoxArray): TBox;
 * procedure TBARandomize(var TBA: TBoxArray);
 * procedure TBAClear(var TBA: TBoxArray; IDs: TIntArray);
 * function  TBAPositions(TBA: TBoxArray; bx: TBox): TIntArray;
 * function  TBAAllValuesSame(TBA: TBoxArray): Boolean;
 * function  TBAAllValuesUnique(TBA: TBoxArray): Boolean; 
 * procedure TBASkipBoxesByArea(var TBA: TBoxArray; skipArea: TBox; fromInside: Boolean);    
 * procedure TBASkipBoxesByAreas(var TBA: TBoxArray; skipAreas: TBoxArray; fromInside: Boolean);
 * function  TBAToParts(TBA: TBoxArray; method: (pm_PartSize, pm_PartAmount); x: Integer): T2DBoxArray;
 * function  TBOutlineToTPA(TB: TBox): TPointArray;
 * function  TBAOutlineToATPA(TBA: TBoxArray): T2DPointArray;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ClearBox(var bx: TBox);
Contributors: Janilabo, LordJashin
Description: Clears the bx..Basically, bx is replaced wth an empty box
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 14th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ClearBox(var bx: TBox);
begin
  bx := Box(0,0,0,0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure FixBox(var bx: TBox);
Contributors: Janilabo
Description: Fixes the bx. Swaps incorrectly set values (X1/Y1 > X2/Y2).
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
Example: (200*, 100, 100*, 200) => (100, 100, 200, 200)       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure FixBox(var bx: TBox);
begin
  if (bx.X1 > bx.X2) then
    Swap(bx.X1, bx.X2);
  if (bx.Y1 > bx.Y2) then
    Swap(bx.Y1, bx.Y2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function BoxContains(inner_bx, outer_bx: TBox): Boolean;
Contributors: Janilabo
Description: Returns true if inner_bx is inside outer_bx.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BoxContains(inner_bx, outer_bx: TBox): Boolean;
begin
  if ((inner_bx.X1 <= inner_bx.X2) and (inner_bx.Y1 <= inner_bx.Y2) and (outer_bx.X1 <= outer_bx.X2) and (outer_bx.Y1 <= outer_bx.Y2)) then
    Result := ((inner_bx.X1 >= outer_bx.X1) and (inner_bx.X1 <= outer_bx.X2) and (inner_bx.X2 >= outer_bx.X1) and (inner_bx.X2 <= outer_bx.X2) and
               (inner_bx.Y1 >= outer_bx.Y1) and (inner_bx.Y1 <= outer_bx.Y2) and (inner_bx.Y2 >= outer_bx.Y1) and (inner_bx.Y2 <= outer_bx.Y2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function ValidBox(bx: TBox): Boolean;
Contributors: Janilabo
Description: Returns true if bx is valid (X1 <= X2 AND Y1 <= Y2).
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function ValidBox(bx: TBox): Boolean;
begin
  Result := ((bx.x1 <= bx.X2) and (bx.y1 <= bx.Y2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function SameBoxes(bx1, bx2: TBox): Boolean;
Contributors: Janilabo
Description: Returns true if bx1 and bx2 are identical.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function SameBoxes(bx1, bx2: TBox): Boolean;
begin
  Result := ((bx1.X1 = bx2.X1) and (bx1.Y1 = bx2.Y1) and
             (bx1.X2 = bx2.X2) and (bx1.Y2 = bx2.Y2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ShrinkBox(var bx: TBox; sSize: Integer);
Contributors: Janilabo
Description: Shrinks bx from all directions using sSize as the pixel amount to shrink.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ShrinkBox(var bx: TBox; sSize: Integer);
begin
  if (sSize < 1) then Exit;
  bx.X1 := (bx.X1 + sSize);
  bx.Y1 := (bx.Y1 + sSize);
  bx.X2 := (bx.X2 - sSize);
  bx.Y2 := (bx.Y2 - sSize);
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ResizeBox(var bx: TBox; pixels, method: Integer);
Contributors: Janilabo
Description: Resizes bx by pixels as the amount.. Contains 11 methods for every direction.
Directions (methods) are listed and commented below.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ResizeBox(var bx: TBox; pixels, method: Integer);
begin
  if (pixels <> 0) then 
    case method of
      0: bx := Box((bx.X1 - pixels), (bx.Y1 - pixels), (bx.X2 + pixels), (bx.Y2 + pixels)); // ALL AREAS 
      1: bx := Box((bx.X1 - pixels), bx.Y1, (bx.X2 + pixels), bx.Y2); // WIDTH
      2: bx := Box(bx.X1, (bx.Y1 - pixels), bx.X2, (bx.Y2 + pixels)); // HEIGHT
      3: bx := Box(bx.X1, (bx.Y1 - pixels), bx.X2, bx.Y2); // UP
      4: bx := Box(bx.X1, bx.Y1, bx.X2, (bx.Y2 + pixels)); // DOWN
      5: bx := Box((bx.X1 - pixels), bx.Y1, bx.X2, bx.Y2); // LEFT 
      6: bx := Box(bx.X1, bx.Y1, (bx.X2 + pixels), bx.Y2); // RIGHT
      7: bx := Box((bx.X1 - pixels), (bx.Y1 - pixels), bx.X2, bx.Y2); // TOP-LEFT 
      8: bx := Box(bx.X1, (bx.Y1 - pixels), (bx.X2 + pixels), bx.Y2); // TOP-RIGHT
      9: bx := Box((bx.X1 - pixels), bx.X1, bx.X2, (bx.Y2 + pixels)); // BOTTOM-LEFT
      10: bx := Box(bx.X1, bx.Y1, (bx.X2 + pixels), (bx.Y2 + pixels)); // BOTTOM-RIGHT 
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure BoxDimensions(bx: TBox; var w, h: Integer);
Contributors: Janilabo
Description: Stores bx dimensions to w (width) and h (height) variables.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure BoxDimensions(bx: TBox; var w, h: Integer);
begin
  w := ((bx.X2 - bx.X1) + 1);
  h := ((bx.Y2 - bx.Y1) + 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure BoxCentralization(var inner_bx: TBox; outer_bx: TBox; method: TMeasurementUnits);
Contributors: Janilabo
Description: Sets inner bx to center of outer bx. Contains 3 methods.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 18th, 2012. By Janilabo.       
Explanation: Methods: mu_WidthHeight = center width & heightwise, 
                      mu_Width = center widthwise, 
                      mu_Height = center heightwise.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure BoxCentralization(var inner_bx: TBox; outer_bx: TBox; method: TMeasurementUnits);
begin
  case method of
    mu_WidthHeight: OffsetBox(inner_bx, (((Round(outer_bx.Y1 + ((outer_bx.Y2 - outer_bx.Y1) / 2)) - (((inner_bx.Y2 - inner_bx.Y1) + 1) div 2)) - inner_bx.Y1)), (Round(outer_bx.X1 + ((outer_bx.X2 - outer_bx.X1) / 2)) - (((inner_bx.X2 - inner_bx.X1) + 1) div 2)) - inner_bx.X1);
    mu_Width: OffsetBox(inner_bx, ((Round(outer_bx.X1 + ((outer_bx.X2 - outer_bx.X1) / 2)) - (((inner_bx.X2 - inner_bx.X1) + 1) div 2)) - inner_bx.X1), 0);
    mu_Height: OffsetBox(inner_bx, 0, ((Round(outer_bx.Y1 + ((outer_bx.Y2 - outer_bx.Y1) / 2)) - (((inner_bx.Y2 - inner_bx.Y1) + 1) div 2)) - inner_bx.Y1));
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountBoxesInBoxBySize(bx: TBox; width, height: Integer): Integer;
Contributors: Janilabo
Description: Returns count of ALL the possible boxes in a box (bx) by size (width*height).
Date Created: October 18th, 2012. By Janilabo.
Last Modified: October 18th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountBoxesInBoxBySize(bx: TBox; width, height: Integer): Integer;
var
  w, h: Integer;
begin
  if ((bx.X1 > bx.X2) or (bx.Y1 > bx.Y2) or (width < 1) or (height < 1)) then
    Exit;
  GetBoxSize(bx, w, h);                                                
  if ((width < (w + 1)) and (height < (h + 1))) then
    Result := ((h - (height - 1)) * (w - (width - 1)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetBoxesInBoxBySize(bx: TBox; width, height: Integer): TBoxArray;
Contributors: Janilabo
Description: Returns ALL the possible boxes in a box (bx) by size (width*height).
Date Created: October 18th, 2012. By Janilabo.
Last Modified: October 18th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetBoxesInBoxBySize(bx: TBox; width, height: Integer): TBoxArray;
var
  r, c, w, h, x, y, i: Integer;
begin
  if ((bx.X1 > bx.X2) or (bx.Y1 > bx.Y2) or (width < 1) or (height < 1)) then
    Exit;
  GetBoxSize(bx, w, h);                                                
  if ((width < (w + 1)) and (height < (h + 1))) then
  begin
    r := (h - (height - 1));
    c := (w - (width - 1));        
    SetLength(Result, (r * c));
    for y := bx.Y1 to (bx.Y1 + (r - 1)) do
      for x := bx.X1 to (bx.X1 + (c - 1)) do 
      begin     
        i := (((y - bx.Y1) * c) + (x - bx.X1));
        Result[i].X1 := x;
        Result[i].Y1 := y;
        Result[i].X2 := (x + (width - 1));
        Result[i].Y2 := (y + (height - 1));
      end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBABounds(TBA: TBoxArray): TBox;
Contributors: Janilabo
Description: Returns the bounds of TBA.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBABounds(TBA: TBoxArray): TBox;
var
  h, i: Integer;
begin
  h := High(TBA);
  if (h < 0) then Exit;
  Result := TBA[0];
  for i := 0 to h do
  begin
    if (Result.X1 > TBA[i].X1) then
      Result.X1 := TBA[i].X1;
    if (Result.Y1 > TBA[i].Y1) then
      Result.Y1 := TBA[i].Y1;
    if (Result.X2 < TBA[i].X2) then
      Result.X2 := TBA[i].X2;
    if (Result.Y2 < TBA[i].Y2) then
      Result.Y2 := TBA[i].Y2;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBARandomize(var TBA: TBoxArray);
Contributors: Janilabo
Description: Randomizes which boxes are at what index in the TBA              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBARandomize(var TBA: TBoxArray);
var
  i, h: integer;
begin
  h := High(TBA);
  for i := 0 to h do
    Swap(TBA[Random(h + 1)], TBA[Random(h + 1)]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBAClear(var TBA: TBoxArray; IDs: TIntArray);
Contributors: Janilabo
Description: Clears TBA boxes at the indexs (IDs).                 
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBAClear(var TBA: TBoxArray; IDs: TIntArray);
var
  i, h, h2: Integer;
  tmp: TBox;
begin
  h := High(IDs);
  h2 := High(TBA);
  for i := 0 to h do
    if InRange(IDs[i], 0, h2) then
      TBA[IDs[i]] := tmp;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBAPositions(TBA: TBoxArray; bx: TBox): TIntArray;
Contributors: Janilabo
Description: Returns all the positions in TBA where bx is found/matched.                 
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBAPositions(TBA: TBoxArray; bx: TBox): TIntArray;
var
  i, h, rC: Integer;
begin
  h := High(TBA);
  SetLength(Result, (h + 1));
  for i := 0 to h do
    if ((bx.x1 = TBA[i].x1) and (bx.y1 = TBA[i].y1) and
        (bx.x2 = TBA[i].x2) and (bx.y2 = TBA[i].y2)) then
    begin
      Result[rC] := i;
      Inc(rC);
    end;
  SetLength(Result, rC);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBAAllValuesSame(TBA: TBoxArray): Boolean;
Contributors: Janilabo
Description: Returns true if all TBA items are identical.                 
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBAAllValuesSame(TBA: TBoxArray): Boolean;
var
  h, i: Integer;
begin
  h := High(TBA);
  if (h < 1) then
  begin
    Result := (h = 0);
    Exit;
  end;
  for i := 1 to h do
    if (TBA[i] <> TBA[0]) then
      Exit;
  Result := True;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBAAllValuesUnique(TBA: TBoxArray): Boolean;
Contributors: Janilabo
Description: Returns true if all TBA values are unique.                 
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBAAllValuesUnique(TBA: TBoxArray): Boolean;
var
  h, i, i2: Integer;
begin
  h := High(TBA);
  if (h < 1) then
  begin
    Result := (h = 0);
    Exit;
  end;
  for i := 0 to (h - 1) do
    for i2 := (i + 1) to h do
      if (i <> i2) then
      begin
        Result := (TBA[i] <> TBA[i2]);
        if not Result then
          Exit;
      end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBASkipBoxesByArea(var TBA: TBoxArray; skipArea: TBox; fromInside: Boolean);
Contributors: Janilabo
Description: TBA will be returned with the boxs not skipped using skipArea. From
             Inside means skip the boxes from inside skipArea, if false then skip
             the boxes from outside the skipArea.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBASkipBoxesByArea(var TBA: TBoxArray; skipArea: TBox; fromInside: Boolean);
var
  i, h, t: Integer;
  tmpArr: TBoxArray;
  sb: Boolean;
begin
  h := High(TBA);
  SetLength(tmpArr, (h + 1));
  for i := 0 to h do
  begin
    case fromInside of
      True: sb := ((TBA[i].x1 >= skipArea.x1) and (TBA[i].y1 >= skipArea.y1) and
                   (TBA[i].x2 <= skipArea.x2) and (TBA[i].y2 <= skipArea.y2));
      False: sb := ((TBA[i].x2 >= skipArea.x1) and (TBA[i].x2 <= skipArea.x2) and
                    (TBA[i].y2 >= skipArea.y1) and (TBA[i].y2 <= skipArea.y2) or
                    (TBA[i].x1 <= skipArea.x2) and (TBA[i].x1 >= skipArea.x1) and
                    (TBA[i].y1 <= skipArea.y2) and (TBA[i].y1 >= skipArea.y1));
    end;
    if not sb then
    begin
      tmpArr[t] := TBA[i];
      Inc(t);
    end;
  end;
  SetLength(tmpArr, t);
  SetLength(TBA, 0);
  TBA := tmpArr;
  SetLength(tmpArr, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure TBASkipBoxesByAreas(var TBA: TBoxArray; skipAreas: TBoxArray; fromInside: Boolean);
Contributors: Janilabo
Description: TBA will be returned with the boxs not skipped using skipAreas. From
             Inside means skip the boxes from inside skipAreas, if false then skip
             the boxes from outside the skipAreas.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure TBASkipBoxesByAreas(var TBA: TBoxArray; skipAreas: TBoxArray; fromInside: Boolean);
var
  i, h, i2, h2, t: Integer;
  tmpArr: TBoxArray;
  sb: Boolean;
begin
  h := High(TBA);
  SetLength(tmpArr, (h + 1));
  h2 := High(skipAreas);
  for i := 0 to h do
  begin
    for i2 := 0 to h2 do
    begin
      case fromInside of
        True: sb := ((TBA[i].x1 >= skipAreas[i2].x1) and (TBA[i].y1 >= skipAreas[i2].y1) and
                     (TBA[i].x2 <= skipAreas[i2].x2) and (TBA[i].y2 <= skipAreas[i2].y2));
        False: sb := ((TBA[i].x2 >= skipAreas[i2].x1) and (TBA[i].x2 <= skipAreas[i2].x2) and
                      (TBA[i].y2 >= skipAreas[i2].y1) and (TBA[i].y2 <= skipAreas[i2].y2) or
                      (TBA[i].x1 <= skipAreas[i2].x2) and (TBA[i].x1 >= skipAreas[i2].x1) and
                      (TBA[i].y1 <= skipAreas[i2].y2) and (TBA[i].y1 >= skipAreas[i2].y1));
      end;
      if sb then
        Break;
    end;
    if not sb then
    begin
      tmpArr[t] := TBA[i];
      Inc(t);
    end;
  end;
  SetLength(tmpArr, t);
  SetLength(TBA, 0);
  TBA := tmpArr;
  SetLength(tmpArr, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBAToParts(TBA: TBoxArray; method: (pm_PartSize, pm_PartAmount); x: Integer): T2DBoxArray;
Contributors: Janilabo
Description: Breaks TBA to parts (TBA => ATBA). Contains 2 methods:                 
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.       
Explanation: pm_PartSize (Breaks TBA to ATBA by size of the parts) [x = size]
             pm_PartAmount (Breaks TBA to ATBA by amount of the parts) [x = amount] 
Example: partAmount of 2. Then the TBA is broken into 2 parts. One with TBA[0]
         and another with TBA[1] e.g. ATBA := [[TBA[0]], [TBA[1]]].
         partSize of 1. Then the TBA is broken into parts of 1. So we get the same
         thing. e.g. ATBA := [[TBA[0]], [TBA[1]]].   
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBAToParts(TBA: TBoxArray; method: (pm_PartSize, pm_PartAmount); x: Integer): T2DBoxArray;
var
  a, e, h, h2, i, i2, p: Integer;
begin
  h := High(TBA);
  case method of
    pm_PartSize:
    if ((h >= 0) and (x > 0)) then
      if (x <= h) then
      begin
        Inc(h);
        p := (h div x);
        if ((p * x) < h) then
          Inc(p);
        SetLength(Result, p);
        for i := 0 to (p - 1) do
          for i2 := 0 to (x - 1) do
          begin
            SetLength(Result[i], x);
            if (a < h) then
            begin
              Result[i][i2] := TBA[a];
              Inc(a);
            end else
            begin
              SetLength(Result[i], i2);
              Exit;
            end;
          end;
      end else
        Result := [TBA];      
    pm_PartAmount:
    begin
      if ((h <= 0) or (x < 2)) then
      begin
        if (x = 1) then
          Result := [TBA]
        else
          if (x > 0) then
            SetLength(Result, x);
        Exit;
      end;
      if (h < (x - 1)) then
        x := (h + 1);
      p := Floor((h + 1) / x);
      if (p = 0) then
        p := 1;
      e := ((h + 1) - (p * x));
      if (e >= (h + 1)) then
        e := 0;
      SetLength(Result, x);
      for i := 0 to (x - 1) do
      begin
        if ((e >= (i + 1)) and (e > 0)) then
          SetLength(Result[i], (p + 1))
        else
          if (i <= h) then
            SetLength(Result[i], p);
        h2 := High(Result[i]);
        for i2 := 0 to h2 do
        begin
          Result[i][i2] := TBA[a];
          Inc(a);
        end;
      end;      
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBOutlineToTPA(TB: TBox): TPointArray;
Contributors: Wanted
Description: Turns the outline of a TBox into a TPA.
Date Created: October 22nd, 2011. By Wanted
Last Modified: November 21st, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBOutlineToTPA(TB: TBox): TPointArray;
var
  I, II, Hi, Lo: Integer;
begin
  Result := [];
  SetLength(Result, (((TB.X2 - TB.X1) * 2) + ((TB.Y2 - TB.Y1) * 2)));
  if (Length(Result) < 1) then
    Exit;
  II := 0;
  for I := TB.X1 to TB.X2 do
  begin
    Result[II] := Point(I, TB.Y1);
    Inc(II);
  end;
  Lo := TB.Y1 + 1;
  Hi := TB.Y2 - 1;
  for I := Lo to Hi do
  begin
    Result[II] := Point(TB.X2, I);
    Inc(II);
  end;
  if (TB.Y1 <> TB.Y2) then
    for I := TB.X2 downto TB.X1 do
    begin
      Result[II] := Point(I, TB.Y2);
      Inc(II);
    end;
  for I := Hi downto Lo do
  begin
    Result[II] := Point(TB.X1, I);
    Inc(II);
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function TBAOutlineToATPA(TBA: TBoxArray): T2DPointArray;
Contributors: Wanted
Description: Turns the outline of multiple TBoxes into multi TPAs.
Date Created: October 22nd, 2011. By Wanted
Last Modified: October 22nd, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function TBAOutlineToATPA(TBA: TBoxArray): T2DPointArray;
var
  I, H: LongInt;
begin
  H := High(TBA);
  SetLength(Result, H + 1);
  for I := 0 to H do
    Result[I] := TBOutlineToTPA(TBA[I]);
end;

