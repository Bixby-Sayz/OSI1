{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                  Mouse Routines
--------------------------------------------------------------------------------
 * procedure MMouse(x, y, rx, ry: Integer);
 * procedure HoldMouseWait(x, y, rx, ry, MinTime, MaxTime: Integer; Left: Boolean);
 * procedure Mouse(x, y, rx, ry: Integer; Left: Boolean);
 * procedure HoldMouseWaitBox(x1, y1, x2, y2, MinTime, MaxTime: Integer; Left: Boolean);
 * procedure MouseBox(x1, y1, x2, y2: Integer; TypeC: ClickActions);
 * procedure MouseCircle(Radius, CX, CY: Integer; TypeC: ClickActions);
 * procedure DragMouse(sX, sY, sRX, sRY, eX, eY, eRX, eRY: Integer; Left: Boolean);
 * procedure DragMouseBox(sX1, sY1, sX2, sY2, eX1, eY1, eX2, eY2: Integer; Left: Boolean);
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure MMouse(x, y, rx, ry: Integer);
Contributors: Timer, Wanted, Freddy
Description: Moves the mouse humanly.
Date Created: August 7th, 2011. By Timer
Last Modified: September 10th, 2012. By Bixby Sayz.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure MMouse(x, y, rx, ry: Integer);
var
  P: TPoint;
begin
  P := RRectanglePoint(X - RX, Y - RY, X + RX, Y + RY);
  if (not (MouseSpeed = 0)) then
    {$IFDEF SCAR336_UP}
      MoveMouseEx(P.X, P.Y, MouseSpeed)
    {$ELSE}
      MoveMouseEx(P.X, P.Y, 0, 0, MouseSpeed)
    {$ENDIF}
  else
    MoveMouse(P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure HoldMouseWait(x, y, rx, ry, MinTime, MaxTime: Integer; Left: Boolean);
Contributors: Wanted, Timer, Anonymous, Freddy
Description: Moves the mouse and clicks + holds humanly.
Date Created: August 19th, 2011. By Wanted
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure HoldMouseWait(x, y, rx, ry, MinTime, MaxTime: Integer; Left: Boolean);
var
  cx, cy: Integer;
begin
  MMouse(x, y, rx, ry);
  WaitRR(60, 90);                  
  GetMousePos(cx, cy);
  ClickMouseEx(cx, cy, TMouseButton(not Left), RR(MinTime, MaxTime));
  WaitRR(100, 200);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure Mouse(x, y, rx, ry: Integer; Left: Boolean);
Contributors: Timer, Wanted
Description: Moves the mouse and clicks humanly.
Date Created: August 7th, 2011. By Wanted & Timer.
Last Modified: August 19th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure Mouse(x, y, rx, ry: Integer; Left: Boolean);
begin
  HoldMouseWait(x, y, rx, ry, 80, 120, Left);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure HoldMouseWaitBox(x1, y1, x2, y2, MinTime, MaxTime: Integer; Left: Boolean);
Contributors: Wanted
Description: Moves the mouse and clicks + holds humanly.
Date Created: August 19th, 2011. By Wanted
Last Modified: September 18th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure HoldMouseWaitBox(x1, y1, x2, y2, MinTime, MaxTime: Integer; Left: Boolean);
var
  P: TPoint;
begin
  P := RRectanglePoint(X1, Y1, X2, Y2);
  HoldMouseWait(P.X, P.Y, 0, 0, MinTime, MaxTime, Left);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure MouseBox(x1, y1, x2, y2: Integer; TypeC: ClickActions);
Contributors: Wanted, Timer
Description: Clicks/moves the mouse in a specified area.
Date Created: August 7th, 2011. By Wanted & Timer.
Last Modified: September 18th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure MouseBox(x1, y1, x2, y2: Integer; TypeC: ClickActions);
var
  P: TPoint;
begin
  P := RRectanglePoint(X1, Y1, X2, Y2);
  case (TypeC) of
    ClickLeft: Mouse(P.X, P.Y, 0, 0, True);
    ClickRight: Mouse(P.X, P.Y, 0, 0, False);
    MoveTo: MMouse(P.X, P.Y, 0, 0);
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure MouseCircle(Radius, CX, CY: Integer; TypeC: ClickActions);
Contributors: Zyt3x, Wanted
Description: Clicks/moves the mouse in a circle with a specified radius.
Date Created: September 4th, 2011. By Zyt3x & Wanted.
Last Modified: September 18th, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure MouseCircle(Radius, CX, CY: Integer; TypeC: ClickActions);
var
  P: TPoint;
begin
  P := RCirclePoint(CX, CY, Radius);
  case TypeC of
    ClickLeft: Mouse(P.X, P.Y, 0, 0, True);
    ClickRight: Mouse(P.X, P.Y, 0, 0, False);
    MoveTo: MMouse(P.X, P.Y, 0, 0);
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DragMouse(sX, sY, sRX, sRY, eX, eY, eRX, eRY: Integer; Left: Boolean);
Contributors: Naum, Wanted, Freddy
Description: Clicks and holds the mouse and then drags it and releases it.
Date Created: August 7th, 2011. By Naum
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DragMouse(sX, sY, sRX, sRY, eX, eY, eRX, eRY: Integer; Left: Boolean);
var
  cx, cy: Integer;
begin
  MMouse(sX, sY, sRX, sRY);
  WaitRR(60, 90);
  GetMousePos(cx, cy);
  MouseBtnDown(cx, cy, TMouseButton(not Left));
  WaitRR(80, 120);
  MMouse(eX, eY, eRX, eRY);
  WaitRR(60, 90);
  GetMousePos(cx, cy);
  MouseBtnUp(cx, cy, TMouseButton(not Left));
  WaitRR(100, 200);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure DragMouseBox(sX1, sY1, sX2, sY2, eX1, eY1, eX2, eY2: Integer; Left: Boolean);
Contributors: Wanted, Freddy
Description: See DragMouse. Except for does in box areas.
Date Created: August 19th, 2011. By Wanted
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure DragMouseBox(sX1, sY1, sX2, sY2, eX1, eY1, eX2, eY2: Integer; Left: Boolean);
var
  cx, cy: Integer;
begin
  MouseBox(sX1, sY1, sX2, sY2, MoveTo);
  WaitRR(60, 90);
  GetMousePos(cx, cy);
  MouseBtnDown(cx, cy, TMouseButton(not Left));
  WaitRR(80, 120);
  MouseBox(eX1, eY1, eX2, eY2, MoveTo);
  WaitRR(60, 90);
  GetMousePos(cx, cy);
  MouseBtnUp(cx, cy, TMouseButton(not Left));
  WaitRR(100, 200);
end;