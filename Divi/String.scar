{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                 String Routines
--------------------------------------------------------------------------------
 * function StrReverse(str: string): string; 
 * function StrCompare(s1, s2: string): Integer;                    
 * function StrStuff(str, stuff: string; iFrom, iCount: Integer): string;          
 * function StrBetween(str: string; pos1, pos2: Integer): string;             
 * function StrCopy(str: string; pos1, pos2: Integer): string;
 * function StrAfter(SubStr, s: string): string;
 * function StrBefore(SubStr, s: string): string;
 * function StrAfterEx(SubStr, s: string; offset: Integer): string;
 * function StrBeforeEx(SubStr, s: string; offset: Integer): string;
 * function StrLastAfter(SubStr, s: string): string;  
 * function StrLastBefore(SubStr, s: string): string;
 * function InStrArrPos(S: string; Arr: TStrArray; var Pos: Integer; CaseSenstive: Boolean): Boolean;
 * function StrInStr(SubStr, S: string): Boolean;
 * function StrInStrMulti(SubStrs: TStrArray; S: string): Boolean;  
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrReverse(str: string): string;
Contributors: Janilabo
Description: Returns reversed str.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrReverse(str: string): string;
var
  i, l: Integer;
begin
  l := Length(str);
  SetLength(Result, l);
  for i := l downto 1 do    
    Result[i] := str[((l - i) + 1)];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrCompare(s1, s2: string): Integer;
Contributors: Janilabo
Description: Compares s1 with s2. Results: 0=EQUAL, 1=s1>s2, -1=s1<s2                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrCompare(s1, s2: string): Integer;
begin
  if (s1 <> s2) then
    if (s1 > s2) then
      Result := 1
    else
      Result := -1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrStuff(str, stuff: string; iFrom, iCount: Integer): string;
Contributors: Janilabo, LordJashin
Description: Stuffs str with stuff, iFrom=start position, iCount=count of chars
to stuff with.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrStuff(str, stuff: string; iFrom, iCount: Integer): string;
begin
  Result := Copy(str, 1, Length(str));
  Delete(Result, iFrom, iCount);
  Insert(stuff, Result, iFrom);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrBetween(str: string; pos1, pos2: Integer): string;
Contributors: Janilabo
Description: Returns the string between pos1 and pos2 of str.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrBetween(str: string; pos1, pos2: Integer): string;
var
  l: Integer;
begin
  l := Length(str);
  if ((pos1 < pos2) and InRange(pos1, 0, (l + 1)) and InRange(pos2, 0, (l + 1))) then
    Result := Copy(str, (pos1 + 1), ((pos2 - pos1) - 2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrCopy(str: string; pos1, pos2: Integer): string;
Contributors: Janilabo
Description: Copies str from pos1 to pos2.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrCopy(str: string; pos1, pos2: Integer): string;
var
  i, l: Integer;
begin
  l := Length(str);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 1, l);
    IntSetRange(pos2, 1, l);
    case (pos1 < pos2) of
      False:
      if (pos1 <> pos2) then
      begin
        SetLength(Result, ((pos1 - pos2) + 1));
        for i := pos1 downto pos2 do
          Result[((pos1 - i) + 1)] := str[i]; 
      end else
        Result := Copy(str, pos1, 1);
      True: Result := Copy(str, pos1, ((pos2 - pos1) + 1)); 
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrAfter(SubStr, s: string): string;
Contributors: Janilabo, LordJashin
Description: Returns the string after SubStr in s.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrAfter(SubStr, s: string): string;
var
  p, sL, subL: Integer;
begin
  subL := Length(SubStr);
  sL := Length(s);
  if (subL >= sL) then Exit;
  p := Pos(SubStr, s);
  if (p > 0) then
    Result := Copy(s, (p + subL), ((1 + sL) - (p + subL)));
end;
         
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrBefore(SubStr, s: string): string;
Contributors: Janilabo, LordJashin
Description: Returns the string before SubStr in s.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrBefore(SubStr, s: string): string;
var
  p: Integer;
begin
  if (Length(SubStr) >= Length(s)) then Exit;
  p := Pos(SubStr, s);
  if (p > 1) then
    Result := Copy(s, 1, (p - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrAfterEx(SubStr, s: string; offset: Integer): string;
Contributors: Janilabo, LordJashin
Description: Returns the string after SubStr in s AFTER offset.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrAfterEx(SubStr, s: string; offset: Integer): string;
var
  p, subL, sL: Integer;
begin
  subL := Length(SubStr);
  sL := Length(s);
  if ((subL >= sL) or (offset >= sL)) then Exit;
  p := PosEx(SubStr, s, offset);
  if (p > 0) then
    Result := Copy(s, (p + subL), ((1 + sL) - (p + subL)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrBeforeEx(SubStr, s: string; offset: Integer): string;
Contributors: Janilabo, LordJashin
Description: Returns the string before SubStr in s AFTER offset.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrBeforeEx(SubStr, s: string; offset: Integer): string;
var
  p, sL: Integer;
begin
  sL := Length(s);
  if ((Length(SubStr) >= sL) or (offset >= sL)) then Exit;
  p := PosEx(SubStr, s, offset);
  if (p > 1) then
    Result := Copy(s, 1, (p - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrLastAfter(SubStr, s: string): string;
Contributors: Janilabo, LordJashin
Description: Returns the string after LAST SubStr in s.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrLastAfter(SubStr, s: string): string;
var
  subL, l, p, lp: Integer;
begin
  l := Length(s);
  subL := Length(SubStr);
  if (subL > l) then Exit;
  repeat
    p := PosEx(SubStr, s, (p + 1));
    if (p > 0) then
      lp := p;
  until (p <= 0);
  if (lp > 0) then
    Result := Copy(s, (lp + subL), ((1 + l) - (lp + subL)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrLastBefore(SubStr, s: string): string;
Contributors: Janilabo
Description: Returns the string before the LAST SubStr in s.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrLastBefore(SubStr, s: string): string;
var
  l, p, lp: Integer;
begin
  l := Length(s);
  if (Length(SubStr) > l) then
    Exit;
  repeat
    p := PosEx(SubStr, s, (p + 1));
    if (p > 0) then
      lp := p;
  until (p <= 0);
  if (lp > 0) then
    Result := Copy(s, 1, (lp - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InStrArrPos(S: string; Arr: TStrArray; var Pos: Integer; CaseSenstive: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if the string is in the array and returns position.
Date Created: October 10th, 2011. By Wanted
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InStrArrPos(S: string; Arr: TStrArray; var Pos: Integer; CaseSenstive: Boolean): Boolean;
var
  H, L: Integer;
  SS: string;
begin
  Result := True;
  H := High(Arr);
  L := Low(Arr);
  if (not (CaseSenstive)) then
  begin
    SS := LowerCase(S);
    for Pos := L to H do
      if (SS = LowerCase(Arr[Pos])) then
        Exit;
  end
  else
    for Pos := L to H do
      if (S = Arr[Pos]) then
        Exit;
  Result := False;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrInStr(SubStr, S: string): Boolean;
Contributors: Wanted
Description: Results true if a string is inside of another string.
Date Created: December 31st, 2011. By Wanted
Last Modified: December 31st, 2011. By Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrInStr(SubStr, S: string): Boolean;
begin
  Result := (Pos(SubStr, S) > 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrInStrMulti(SubStrs: TStrArray; S: string): Boolean;
Contributors: Wanted
Description: Results true if any strings are inside a string.
Date Created: December 31st, 2011. By Wanted
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrInStrMulti(SubStrs: TStrArray; S: string): Boolean;
var
  I, H: Integer;
begin
  H := High(SubStrs);
  Result := True;
  for I := 0 to H do
    if (StrInStr(SubStrs[I], S)) then
      Exit;
  Result := False;
end;