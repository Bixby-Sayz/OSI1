{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                 String Routines
--------------------------------------------------------------------------------
 * function StrCount(SubStr, s: string; overlap: Boolean): Integer;
 * function StrReverse(s: string): string; 
 * function StrCompare(s1, s2: string): Integer;    
 * function StrSplit(text, separator: string; ID: Integer): string;
 * function StrSplitEx(text, separator: string; IDs: TIntArray): TStrArray;                
 * function StrStuff(SubStr, s: string; iFrom, iCount: Integer): string;
 * function StrStuffEx(SubStr, s: string; pos1, pos2: Integer): string;          
 * function StrBetweenEx(s: string; pos1, pos2: Integer): string;             
 * function StrCopyEx(s: string; pos1, pos2: Integer): string;
 * function StrReplaceEx(Text, FindS, ReplaceS: string; Offset: Integer): string;
 * function StrAfter(SubStr, s: string): string;
 * function StrBefore(SubStr, s: string): string;
 * function StrAfterEx(SubStr, s: string; offset: Integer): string;
 * function StrBeforeEx(SubStr, s: string; offset: Integer): string;
 * function StrLastAfter(SubStr, s: string): string;  
 * function StrLastBefore(SubStr, s: string): string;              
 * function StrClosestPos(SubStr, s: string; iFrom: Integer): Integer;
 * function StrFarthestPos(SubStr, s: string; iFrom: Integer): Integer;
 * function InStrArrPos(S: string; Arr: TStrArray; var Pos: Integer; CaseSenstive: Boolean): Boolean;
 * function StrContainsC(x: Char; s: string): Boolean;
 * function StrContains(SubStr, s: string): Boolean;
 * function StrContainsEx(SubStrs: TStrArray; s: string): Boolean;  
 * function StrExplodeMulti(Separators: TStrArray; s: string): TStrArray;     
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrCount(SubStr, s: string; overlap: Boolean): Integer;
Contributors: Janilabo                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 12th, 2012. By Janilabo.
Explanation:   Counts all strings (SubStr) in text (s).
               If overlap is set to true, strings can overlap.
               ('test', 'testestest', False) => 2
               ('test', 'testestest', True) => 3 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrCount(SubStr, s: string; overlap: Boolean): Integer;
var
  p, o: Integer;
begin
  if not overlap then
  begin      
    o := Length(SubStr);
    p := (p - (o - 1));
  end else      
    o := 1; 
  repeat
    p := PosEx(SubStr, s, (p + o));
    if (p > 0) then
      Inc(Result);
  until (p <= 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrReverse(s: string): string;
Contributors: Janilabo
Description: Returns reversed str.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrReverse(s: string): string;
var
  i, l: Integer;
begin
  l := Length(s);
  SetLength(Result, l);
  for i := l downto 1 do    
    Result[i] := s[((l - i) + 1)];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrCompare(s1, s2: string): Integer;
Contributors: Janilabo
Description: Compares s1 with s2. Results: 0=EQUAL, 1=s1>s2, -1=s1<s2                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrCompare(s1, s2: string): Integer;
begin
  if (s1 <> s2) then
    if (s1 > s2) then
      Result := 1
    else
      Result := -1;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrSplit(text, separator: string; ID: Integer): string;
Contributors: Janilabo
Description: Splits text using separator and returns a string specified by the ID (Index in the array of splitted text)                                  
Date Created: October 18th, 2012. By Janilabo.
Last Modified: October 18th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrSplit(text, separator: string; ID: Integer): string;
var
  tmp: TStrArray;
begin
  if (ID > -1) then
    if (text <> '') then
    begin
      tmp := ExplodeEx(separator, text, (ID + 2));
      if ((ID < (High(tmp) + 1)) and (ID > -1))then
        Result := tmp[ID];
      SetLength(tmp, 0);
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrSplitEx(text, separator: string; IDs: TIntArray): TStrArray;
Contributors: Janilabo
Description: Splits text using separator and returns splitted text specified by IDs (Indexs in the array of splitted text)                                                              
Date Created: October 18th, 2012. By Janilabo.
Last Modified: October 18th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrSplitEx(text, separator: string; IDs: TIntArray): TStrArray;
var
  h, i, l: Integer;
  tmp: TStrArray;
begin
  l := Length(IDs);
  if (l < 1) then
    Exit;
  SetLength(Result, l);
  if (text <> '') then
  begin
    tmp := ExplodeEx(separator, text, (TIAMax(IDs) + 2));
    h := High(tmp);
    for i := 0 to (l - 1) do
      if ((IDs[i] < (h + 1)) and (IDs[i] > -1)) then
        Result[i] := tmp[IDs[i]];
    SetLength(tmp, 0);
  end;
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrStuff(SubStr, s: string; iFrom, iCount: Integer): string;
Contributors: Janilabo, LordJashin
Description: Returns s stuffed with SubStr.
             iFrom=start position, iCount=count of chars to stuff with.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 15th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrStuff(SubStr, s: string; iFrom, iCount: Integer): string;
var
  l: Integer;
begin
  Result := s;
  l := Length(Result);
  IntSetRange(iFrom, 1, l);
  IntSetRange(iCount, 1, l);
  Delete(Result, iFrom, iCount);
  Insert(SubStr, Result, iFrom);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrStuffEx(SubStr, s: string; pos1, pos2: Integer): string;
Contributors: Janilabo, LordJashin
Description: Returns s stuffed with SubStr.
             pos1=start position, pos2=finish position.
             With pos1 > pos2 s will be reversed.                                                                                 
Date Created: October 15th, 2012. By Janilabo.
Last Modified: October 15th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrStuffEx(SubStr, s: string; pos1, pos2: Integer): string;
var
  i, l: Integer;
begin
  Result := s;
  l := Length(Result); 
  IntSetRange(pos1, 1, l);
  IntSetRange(pos2, 1, l);
  case (pos1 > pos2) of
    True:
    begin          
      Delete(Result, pos2, ((pos1 - pos2) + 1));
      l := Length(SubStr);
      SetLength(s, l);
      for i := l downto 1 do    
        s[i] := SubStr[((l - i) + 1)];
      Insert(s, Result, pos2);
    end;
    False:
    begin
      Delete(Result, pos1, ((pos2 - pos1) + 1));
      Insert(SubStr, Result, pos1);
    end;   
  end;
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrBetweenEx(s: string; pos1, pos2: Integer): string;
Contributors: Janilabo
Description: Returns the string between pos1 and pos2 of s.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrBetweenEx(s: string; pos1, pos2: Integer): string;
var
  l: Integer;
begin
  l := Length(s);
  if ((pos1 < pos2) and InRange(pos1, 0, (l + 1)) and InRange(pos2, 0, (l + 1))) then
    Result := Copy(s, (pos1 + 1), ((pos2 - pos1) - 2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrCopyEx(s: string; pos1, pos2: Integer): string;
Contributors: Janilabo
Description: Copies s from pos1 to pos2.                                                              
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By Janilabo. 
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrCopyEx(s: string; pos1, pos2: Integer): string;
var
  i, l: Integer;
begin
  l := Length(s);
  if (l > 0) then 
  begin   
    IntSetRange(pos1, 1, l);
    IntSetRange(pos2, 1, l);
    case (pos1 < pos2) of
      False:
      if (pos1 <> pos2) then
      begin
        SetLength(Result, ((pos1 - pos2) + 1));
        for i := pos1 downto pos2 do
          Result[((pos1 - i) + 1)] := s[i]; 
      end else
        Result := Copy(s, pos1, 1);
      True: Result := Copy(s, pos1, ((pos2 - pos1) + 1)); 
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrReplaceEx(Text, FindS, ReplaceS: string; Offset: Integer): string;
Contributors: Janilabo
Description: Basic Replacing function. Replaces FindS with ReplaceS in Text.
             Starts from offset... Returns the replaced Text.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrReplaceEx(Text, FindS, ReplaceS: string; Offset: Integer): string;
var
  tL: Integer;
begin
  tL := Length(Text);
  if ((Length(FindS) > tL) or (Offset > tL)) then
    Exit;                        
  if (Offset < 1) then
    Offset := 1;
  Result := (Copy(Text, 1, (Offset - 1)) + Replace(Copy(Text, Offset, ((tL - Offset) + 1)), FindS, ReplaceS)); 
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrAfter(SubStr, s: string): string;
Contributors: Janilabo, LordJashin
Description: Returns the string after SubStr in s.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrAfter(SubStr, s: string): string;
var
  p, sL, subL: Integer;
begin
  subL := Length(SubStr);
  sL := Length(s);
  if (subL >= sL) then Exit;
  p := Pos(SubStr, s);
  if (p > 0) then
    Result := Copy(s, (p + subL), ((1 + sL) - (p + subL)));
end;
         
{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrBefore(SubStr, s: string): string;
Contributors: Janilabo, LordJashin
Description: Returns the string before SubStr in s.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrBefore(SubStr, s: string): string;
var
  p: Integer;
begin
  if (Length(SubStr) >= Length(s)) then Exit;
  p := Pos(SubStr, s);
  if (p > 1) then
    Result := Copy(s, 1, (p - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrAfterEx(SubStr, s: string; offset: Integer): string;
Contributors: Janilabo, LordJashin
Description: Returns the string after SubStr in s AFTER offset.                  
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrAfterEx(SubStr, s: string; offset: Integer): string;
var
  p, subL, sL: Integer;
begin
  subL := Length(SubStr);
  sL := Length(s);
  if ((subL >= sL) or (offset >= sL)) then Exit;
  p := PosEx(SubStr, s, offset);
  if (p > 0) then
    Result := Copy(s, (p + subL), ((1 + sL) - (p + subL)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrBeforeEx(SubStr, s: string; offset: Integer): string;
Contributors: Janilabo, LordJashin
Description: Returns the string before SubStr in s AFTER offset.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrBeforeEx(SubStr, s: string; offset: Integer): string;
var
  p, sL: Integer;
begin
  sL := Length(s);
  if ((Length(SubStr) >= sL) or (offset >= sL)) then Exit;
  p := PosEx(SubStr, s, offset);
  if (p > 1) then
    Result := Copy(s, 1, (p - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrLastAfter(SubStr, s: string): string;
Contributors: Janilabo, LordJashin
Description: Returns the string after LAST SubStr in s.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 6th, 2012. By LordJashin.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrLastAfter(SubStr, s: string): string;
var
  subL, l, p, lp: Integer;
begin
  l := Length(s);
  subL := Length(SubStr);
  if (subL > l) then Exit;
  repeat
    p := PosEx(SubStr, s, (p + 1));
    if (p > 0) then
      lp := p;
  until (p <= 0);
  if (lp > 0) then
    Result := Copy(s, (lp + subL), ((1 + l) - (lp + subL)));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrLastBefore(SubStr, s: string): string;
Contributors: Janilabo
Description: Returns the string before the LAST SubStr in s.
Date Created: September 30th, 2012. By Janilabo.
Last Modified: September 30th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrLastBefore(SubStr, s: string): string;
var
  l, p, lp: Integer;
begin
  l := Length(s);
  if (Length(SubStr) > l) then
    Exit;
  repeat
    p := PosEx(SubStr, s, (p + 1));
    if (p > 0) then
      lp := p;
  until (p <= 0);
  if (lp > 0) then
    Result := Copy(s, 1, (lp - 1));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrClosestPos(SubStr, s: string; iFrom: Integer): Integer;
Contributors: Janilabo
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 12th, 2012. By Janilabo.
Explanation:   Returns closest position of string (SubStr) in text (s)
               -in comparison to the target position (iFrom).
               ('test', 'test string for testing purposes.', 9) => 1
               ('test', 'test string for testing purposes.', 10) => 17
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrClosestPos(SubStr, s: string; iFrom: Integer): Integer;
var
  sL, o, p: Integer;
begin
  sL := Length(s);
  if ((Length(SubStr) <= sL) and (iFrom > 0) and (iFrom <= sL)) then
  repeat
    p := PosEx(SubStr, s, (o + 1));
    if (p > 0) then
    begin
      if (Result = 0) then
        Result := p
      else
        if (IAbs(iFrom - p) < IAbs(iFrom - Result)) then
          Result := p
        else
          Exit;
      o := p;
    end;
  until (p <= 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrFarthestPos(SubStr, s: string; iFrom: Integer): Integer;
Contributors: Janilabo
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 12th, 2012. By Janilabo.
Explanation:   Returns farthest position of string (SubStr) in text (s)
               -in comparison to the target position (iFrom).
               ('test', 'test string for testing purposes.', 9) => 17
               ('test', 'test string for testing purposes.', 10) => 1
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrFarthestPos(SubStr, s: string; iFrom: Integer): Integer;
var
  sL, o, p: Integer;
begin
  sL := Length(s);
  if ((Length(SubStr) <= sL) and (iFrom > 0) and (iFrom <= sL)) then
  repeat
    p := PosEx(SubStr, s, (o + 1));
    if (p > 0) then
    begin    
      if (Result = 0) then
        Result := p
      else
        if (IAbs(iFrom - p) >= IAbs(iFrom - Result)) then
          Result := p;
      o := p;
    end;
  until (p <= 0);
end; 

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InStrArrPos(S: string; Arr: TStrArray; var Pos: Integer; CaseSenstive: Boolean): Boolean;
Contributors: Wanted
Description: Returns true if the string is in the array and returns position.
Date Created: October 10th, 2011. By Wanted
Last Modified: July 20th, 2012. By Freddy
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InStrArrPos(S: string; Arr: TStrArray; var Pos: Integer; CaseSenstive: Boolean): Boolean;
var
  H, L: Integer;
  SS: string;
begin
  Result := True;
  H := High(Arr);
  L := Low(Arr);
  if (not (CaseSenstive)) then
  begin
    SS := LowerCase(S);
    for Pos := L to H do
      if (SS = LowerCase(Arr[Pos])) then
        Exit;
  end
  else
    for Pos := L to H do
      if (S = Arr[Pos]) then
        Exit;
  Result := False;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrContainsC(x: Char; s: string): Boolean;
Contributors: Janilabo
Description: Returns true if text (s) contains char (x).
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 12th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrContainsC(x: Char; s: string): Boolean;
begin
  Result := (Pos(x, s) > 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrContains(SubStr, s: string): Boolean;
Contributors: Janilabo
Description: Returns true if text (s) contains string (SubStr).
Date Created: September 30th, 2012. By Janilabo.
Last Modified: October 12th, 2012. By Janilabo.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrContains(SubStr, s: string): Boolean;
begin
  Result := (Pos(SubStr, s) > 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrContainsEx(SubStrs: TStrArray; s: string): Boolean;
Contributors: Wanted, Freddy, LordJashin
Description: Results true if any strings are inside a string.
Date Created: December 31st, 2011. By Wanted
Last Modified: October 23rd, 2012. By LordJashin
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrContainsEx(SubStrs: TStrArray; s: string): Boolean;
var
  I, H: Integer;
begin
  H := High(SubStrs);
  Result := True;
  for I := 0 to H do
    if (StrContains(SubStrs[I], s)) then
      Exit;
  Result := False;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function StrExplodeMulti(Separators: TStrArray; s: string): TStrArray;
Contributors: Janilabo 
Date Created: October 21st, 2012. By Janilabo
Last Modified: October 21st, 2012. By Janilabo
Explanation: Explodes s with multiple separators/delimiters (Separators).
             The importance order for Separators items is from left to right (=>).
             So place the important ones first and then less important after those.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function StrExplodeMulti(Separators: TStrArray; s: string): TStrArray;
var                          
  p, h, i, x, o, m, l: Integer;
begin
  h := High(Separators);
  if (h > -1) then
  begin 
    o := 1;
    SetLength(Result, Length(s));
    repeat  
      l := 0;           
      for x := 0 to h do
      begin
        p := Pos(Separators[x], s);
        case (p < 1) of
          True:
          begin
            Delete(Separators, x, 1);
            Dec(x);
            Dec(h);
          end;
          False:
          if ((l = 0) or (p < l)) then
          begin     
            m := x;
            l := p;
          end;
        end;
      end;
      if (l > 0) then            
      begin      
        Result[i] := Copy(s, 1, (l - 1));
        Delete(s, 1, ((l + Length(Separators[m])) - 1));         
        Inc(i);
      end else
        Result[i] := Copy(s, 1, Length(s));
    until (l = 0);
    SetLength(Result, (i + 1));
  end else
    Result := [s];
end;
