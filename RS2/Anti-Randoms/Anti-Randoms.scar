{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                             Random Solving Routines
--------------------------------------------------------------------------------
 * type TRS2Random, TRS2RandomArray.
 * var RS2Randoms: TRS2RandomArray;
 * var OverideRandInvTab: Boolean;
 * function FindRandomEventGift: Boolean;
 * function GetMissingTabs: TIntegerArray;
 * procedure InitiateAntiRandoms;
 * function OSIFindRandoms: Boolean;
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{$I Abyssal.scar}
{$I BeeKeeper.scar}
{$I CapnArnav.scar}
{$I Demon.scar}
{$I EvilBob.scar}
{$I Forester.scar}
{$I Frog.scar}
{$I Leo.scar}
{$I Maze.scar}
{$I Mime.scar}
{$I Molly.scar}
{$I Mordaut.scar}
{$I Pillory.scar}
{$I Pinball.scar}
{$I PrisonPete.scar}
{$I Quiz.scar}
{$I Sandwich.scar}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
type TRS2Random, TRS2RandomArray.
Contributors: Wanted, Freddy
Description: Type used to store random information
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

type
  TRS2Random = record
    Name: string;
    TabsMissing: TIntArray;
    InRandom, SolveRandom: function: Boolean;
  end;
  TRS2RandomArray = array of TRS2Random;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
var RS2Randoms: TRS2RandomArray;
Contributors: Wanted
Description: Variable used to store random information.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: December 1st, 2011. By Wanted. RS2 Build 687.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

var
  RS2Randoms: TRS2RandomArray;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
var OverideRandInvTab: Boolean;
Contributors: Wanted
Description: Variable used to allow people to disable antirandoms from checking gametab.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: December 1st, 2011. By Wanted. RS2 Build 687.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

var
  OverideRandInvTab: Boolean;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindRandomEventGift: Boolean;
Contributors: Wanted
Description: Finds and solves random event gifts.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: March 30th, 2012. By Wanted. RS2 Build 710.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindRandomEventGift: Boolean;
var
  dtmGift: LongInt;
  P: TPoint;
begin
  Result := False;
  if (not (OverideRandInvTab)) then
    SetGameTab(Tab_Inv);
  if (GetCurrentTab <> Tab_Inv) then
    Exit;
  dtmGift := DTMFromString('78DA637460626078C280028E15D932FC07D28' +
           'C40FC1F0818CD806AEE30A0012630C908E53182CCB94A408D1F90' +
           '7F9F801A7F20FF1901355E40FE7B026AAC8850638AE9777435003' +
           '9320FC7');
  Result := FindDTM(dtmGift, P.X, P.Y, MIX1, MIY1, MIX2, MIY2);
  FreeDTM(dtmGift);
  if (not (REsult)) then
    Exit;
  WriteLn('Found Random event gift!');
  WriteLn('Solving Random event gift...');
  MouseItem(CordsToItemSlot(P), ClickLeft, False);
  WaitRR(3500, 4500);
  MouseBox(42, 74, 189, 124, ClickLeft);  // Temp solution soon, BoxRewards
  WaitRR(500, 1000);
  MouseBox(390, 160, 473, 209, ClickLeft);
  WaitRR(500, 1000);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure InitiateAntiRandoms;
Contributors: Wanted
Description: Loads out all the antirandom information.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: January 12th, 2012. By Wanted. RS2 Build 696.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure InitiateAntiRandoms;
begin
  SetLength(RS2Randoms, 17);
  with RS2Randoms[0] do
  begin
    Name := 'Abyssal';
    TabsMissing := [0, 9];
    InRandom := @Abyss_InRandom;
    SolveRandom := @Abyss_SolveRandom;
  end;
  with RS2Randoms[1] do
  begin
    Name := 'Beekeeper';
    TabsMissing := [0, 9];
    InRandom := @BeeKeeper_InRandom;
    SolveRandom := @BeeKeeper_SolveRandom;
  end;
  with RS2Randoms[2] do
  begin
    Name := 'Cap''n Arnav';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[3] do
  begin
    Name := 'Demon';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[4] do
  begin
    Name := 'Evil Bob';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[5] do
  begin
    Name := 'Freaky Forester';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[6] do
  begin
    Name := 'Frog';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[7] do
  begin
    Name := 'Leo the Grave Digger';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[8] do
  begin
    Name := 'Maze';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[9] do
  begin
    Name := 'Mime';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[10] do
  begin
    Name := 'Molly''s Evil Twin';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[11] do
  begin
    Name := 'Mordaut Surprise Exam';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[12] do
  begin
    Name := 'Pillory';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[13] do
  begin
    Name := 'Pinball';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[14] do
  begin
    Name := 'Prison Pete';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[15] do
  begin
    Name := 'Quiz';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
  with RS2Randoms[16] do
  begin
    Name := 'Sandwich Lady';
    TabsMissing := [0];
    InRandom := nil;
    SolveRandom := nil;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetMissingTabs: TIntArray;
Contributors: Wanted, Freddy
Description: Used for counting missing tabs for comparison in OSIFindRandoms.
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetMissingTabs: TIntArray;
var
  I, L: Integer;
begin
  Result := [];
  L := 0;
  for I := 0 to 15 do
    if (not (TabExists(I))) then
    begin
      if (I = Tab_Objectives) then
        Continue;
      Inc(L);
      SetLength(Result, L);
      Result[L - 1] := I;
    end;
  if (Length(Result) > 0) then
    if (BankScreen) then
      Result := [];
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OSIFindRandoms: Boolean;
Contributors: Wanted, Freddy
Description: Handles all of OSI's RS2 anti-random rountines.
Date Created: August 7th, 2011. By Wanted. RS2 Build 660.
Last Modified: July 20th, 2012. By Freddy. RS2 Build 725.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OSIFindRandoms: Boolean;
var
  InitCompassAngle: Extended;
  MissingTabs: TIntArray;
  RandomSolved, B: Boolean;
  I, H: Integer;
begin
  Result := False;
  MissingTabs := GetMissingTabs;
  RandomSolved := False;
  H := High(RS2Randoms);
  for I := 0 to H do
    if (RS2Randoms[I].InRandom <> nil) then
      if (TIAContains(RS2Randoms[I].TabsMissing, Length(MissingTabs))) then
      begin
        Result := RS2Randoms[I].InRandom();
        if (Result) then
        begin
          Players[CurrentPlayer].Rand := RS2Randoms[I].Name;
          WriteLn(RS2Randoms[I].Name + ' random detected!');
          if (RS2Randoms[I].SolveRandom <> nil) then
          begin
            InitCompassAngle := GetCompassAngleDegrees;
            if (not (RS2Randoms[I].SolveRandom())) then
            begin
              WriteLn(RS2Randoms[I].Name + ' random solver failed! Needs fixing by an expert!');
              WriteLn('Please contact an OSI developer http://forums.scar-divi.com');
              WriteLn('Player stuck in ' + RS2Randoms[I].Name + ' random.');
              Players[CurrentPlayer].Active := False;
              Logout;
              Exit;
            end
            else
            begin
              RandomSolved := True;
              Break;
            end;
          end
          else
          begin
            WriteLn(RS2Randoms[I].Name + ' random solver either doesn''t exist yet or has been disabled.');
            WriteLn('Please contact an OSI developer http://forums.scar-divi.com');
            WriteLn('Player stuck in ' + RS2Randoms[I].Name + ' random.');
            Players[CurrentPlayer].Active := False;
            Logout;
            Exit;
          end;
        end;
      end;
  if ((Length(MissingTabs) > 5) or (TIAContains(MissingTabs, Tab_Magic))) then
    if (not (RandomSolved)) then
    begin
      Result := True;
      WriteLn('Unknown random deteced! Detection and solver needs to be made by an expert!');
      WriteLn('Please contact an OSI developer http://forums.scar-divi.com');
      WriteLn('Player stuck in unknown random.');
      Players[CurrentPlayer].Rand := 'Unknown random';
      Players[CurrentPlayer].Active := False;
      Logout;
      Exit;
    end;
  if (RandomSolved) then
  begin
    WaitRR(2000, 3000);
    MakeCompass(InitCompassAngle);
  end;
  ClickContinueEx(True, True);
  B := FindRandomEventGift;
  if (not (Result)) then
    Result := B;
end;