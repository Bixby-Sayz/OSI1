{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                                Inventory Routines
--------------------------------------------------------------------------------
 * function GetInvSlotIndex(Row, Column: Integer): Integer;
     By: Wamted
 * function GetItemBounds(Slot: Integer): TBox;
     By: Wanted
 * function CordsToItemSlot(P: TPoint): Integer;
     By: Wanted
 * function InvItemExists(Slot: Integer): Boolean;
     By: Wanted
 * function InvCount: Integer;
     By: Wanted
 * function InvFull: Boolean;
     By: Wanted
 * function InvEmpty: Boolean;
     By: Wanted
 * function MouseItem(Slot: Integer; TypeC: ClickActions): Boolean;
     By: Wanted
 * function DragItem(FromSlot, ToSlot: Integer): Boolean;
     By: Wanted
 * function GetDropPattern(Which: Integer): TIntegerArray;
     By: Wanted
 * function DropItem(Slot: Integer): Boolean;
     By: Wanted
 * function DropAllExcludeEx(Exclude, Pattern: TIntegerArray): Integer;
     By: Wanted
 * function DropAllExclude(Exclude: TIntegerArray): Integer;
     By: Wanted
 * function DropItemsEx(Slots, Pattern: TIntegerArray): Integer;
     By: Wanted
 * function DropItems(Slots: TIntegerArray): Integer;
     By: Wanted
 * function DropAll: Integer;
     By: Wanted
 * function FindInvItemsDTM(dtm: Integer): TIntegerArray;
     By: Wanted
 * function CountInvItemsDTM(dtm: Integer): Integer;
     By: Wanted
 * function FindInvItemsBMP(bmp, Tol: Integer): TIntegerArray;
     By: Wanted
 * function CountInvItemsBMP(bmp, Tol: Integer): Integer;
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                               Bank.scar forwards
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function BankScreen: Boolean; forward;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetInvSlotIndex(Row, Column: Integer): Integer;
Contributors: Wanted
Description: Returns index of an inventory slot based on row and column position.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 6th, 2011. By Wanted. RS2 Build 675.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetInvSlotIndex(Row, Column: Integer): Integer;
begin
  Result := ((((Row - 1) * 4) + Column) - 1);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetItemBounds(Slot: Integer): TBox;
Contributors: Wanted
Description: Returns the bounds of an item in the inventory.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 6th, 2011. By Wanted. RS2 Build 675.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetItemBounds(Slot: Integer): TBox;
begin
  Result := Box(563 + ((Slot mod 4) * 41), 213 + ((Slot div 4) * 36), 598 + ((Slot mod 4) * 42), 244 + ((Slot div 4) * 36));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CordsToItemSlot(P: TPoint): Integer;
Contributors: Wanted
Description: Returns the bounds of an item in the inventory.
Date Created: November 9th, 2011. By Wanted. RS2 Build 677.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CordsToItemSlot(P: TPoint): Integer;
var
  I: Integer;
  B: TBox;
begin
  Result := 0;
  for I := 0 to 27 do
  begin
    B := GetItemBounds(I);
    if (PointInBox(P, B)) then
    begin
      Result := I;
      Exit;
    end;
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvItemExists(Slot: Integer): Boolean;
Contributors: Wanted
Description: Returns true if there's an item in the given inventory slot.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvItemExists(Slot: Integer): Boolean;
var
  P: TPoint;
  B: TBox;
begin
  Result := False;
  if (not (SetGameTab(Tab_Inv))) then
    if (not (BankScreen)) then
      Exit;
  B := GetItemBounds(Slot);
  Result := FindColor(P.X, P.Y, clObjectOutline, B.X1, B.Y1, B.X2, B.Y2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvCount: Integer;
Contributors: Wanted
Description: Returns the number of occupied spots by items in your inventory.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvCount: Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 27 do
    if (InvItemExists(I)) then
      Inc(Result);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvCount: Integer;
Contributors: Wanted
Description: Returns true if all 28 spots are full.
Date Created: November 18th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 18th, 2011. By Wanted. RS2 Build 675.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvFull: Boolean;
begin
  Result := (InvCount = 28);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function InvEmpty: Boolean;
Contributors: Wanted
Description: Returns true if inventory is empty, slightly faster than InvCount = 0;
Date Created: December 1st, 2011. By Wanted. RS2 Build 687.
Last Modification: December 1st, 2011. By Wanted. RS2 Build 687.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function InvEmpty: Boolean;
var
  P: TPoint;
begin
  Result := False;
  if (not (SetGameTab(Tab_Inv))) then
    if (not (BankScreen)) then
      Exit;
  Result := FindColor(P.X, P.Y, clObjectOutline, MIX1, MIY1, MIX2, MIY2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseItem(Slot: Integer; TypeC: ClickActions): Boolean;
Contributors: Wanted
Description: Clicks on an item.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 28th, 2011. By Wanted. RS2 Build 686.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseItem(Slot: Integer; TypeC: ClickActions): Boolean;
var
  B: TBox;
begin
  Result := InvItemExists(Slot);
  if (not (Result)) then
    Exit;
  B := GetItemBounds(Slot);
  MouseBox(B.X1 + 2, B.Y1 + 2, B.X2 - 2, B.Y2 - 2, TypeC);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DragItem(FromSlot, ToSlot: Integer): Boolean;
Contributors: Wanted
Description: Drags an item from one slot to another.
Date Created: November 6th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DragItem(FromSlot, ToSlot: Integer): Boolean;
var
  B, B2: TBox;
begin
  Result := InvItemExists(FromSlot);
  if (not (Result)) then
    Exit;
  B := GetItemBounds(FromSlot);
  B2 := GetItemBounds(ToSlot);
  DragMouseBox(B.X1, B.Y1, B.X2, B.Y2, B2.X1, B2.Y1, B2.X2, B2.Y2, True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetDropPattern(Which: Integer): TIntegerArray;
Contributors: Wanted
Description: Returns a list of all invetory spaces in a drop order. See manual for details.
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetDropPattern(Which: Integer): TIntegerArray;
begin
  if (not (InRange(Which, 0, 5))) then
    Which := Random(6);
  case Which of
    0: Result := [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27];
    1: Result := [3, 2, 1, 0, 7, 6, 5, 4, 11, 10, 9, 8, 15, 14, 13, 12, 19, 18, 17, 16, 23, 22, 21, 20, 27, 26, 25, 24];
    2: Result := [0, 4, 8, 12, 16, 20, 24, 1, 5, 9, 13, 17, 21, 25, 2, 6, 10, 14, 18, 22, 26, 3, 7, 11, 15, 19, 23, 27];
    3: Result := [3, 7, 11, 15, 19, 23, 27, 2, 6, 10, 14, 18, 22, 26, 1, 5, 9, 13, 17, 21, 25, 0, 4, 8, 12, 16, 20, 24];
    4: Result := [0, 1, 2, 3, 7, 6, 5, 4, 8, 9, 10, 11, 15, 14, 13, 12, 16, 17, 18, 19, 23, 22, 21, 20, 24, 25, 26, 27];
    5: Result := [3, 2, 1, 0, 4, 5, 6, 7, 11, 10, 9, 8, 12, 13, 14, 15, 19, 18, 17, 16, 20, 21, 22, 23, 27, 26, 25, 24];
  end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItem(Slot: Integer): Boolean;
Contributors: Wanted
Description: Drops the item in the selected slot if it exists, true if exists and done.
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItem(Slot: Integer): Boolean;
begin
  Result := False;
  if (not (MouseItem(Slot, ClickRight))) then
    Exit;
  Result := ChooseOptionMulti(['Drop ', 'rop ', 'Drop', 'rop']);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropAllExcludeEx(Exclude, Pattern: TIntegerArray): Integer;
Contributors: Wanted
Description: Drops all the items in invetory except for those in excluded spaces
returns number of items dropped. Use your own custom pattern or GetDropPattern.
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropAllExcludeEx(Exclude, Pattern: TIntegerArray): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 27 do
    if (not (TIAContains(Exclude, Pattern[I]))) then
      if (DropItem(Pattern[I])) then
        Inc(Result);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropAllExclude(Exclude: TIntegerArray): Integer;
Contributors: Wanted
Description: Drops all the items in invetory except for those in excluded spaces
returns number of items dropped. Uses GetDropPattern(2)
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropAllExclude(Exclude: TIntegerArray): Integer;
begin
  Result := DropAllExcludeEx(Exclude, GetDropPattern(2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItemsEx(Slots, Pattern: TIntegerArray): Integer;
Contributors: Wanted
Description: Drops all the items in invetory specified returns number of items
dropped. Use your own custom pattern or GetDropPattern.
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItemsEx(Slots, Pattern: TIntegerArray): Integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to 27 do
    if (TIAContains(Slots, Pattern[I])) then
      if (DropItem(Pattern[I])) then
        Inc(Result);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropItems(Slots: TIntegerArray): Integer;
Contributors: Wanted
Description: Drops all the items in invetory specified returns number of items
dropped. Uses GetDropPattern(2).
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropItems(Slots: TIntegerArray): Integer;
begin
  Result := DropItemsEx(Slots, GetDropPattern(2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function DropAll: Integer;
Contributors: Wanted
Description: Drops all the items in invetory and returns number of items dropped. Uses GetDropPattern(2).
Date Created: November 24th, 2011. By Wanted. RS2 Build 682.
Last Modification: November 24th, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function DropAll: Integer;
begin
  Result := DropAllExcludeEx([], GetDropPattern(2));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindInvItemsDTM(dtm: Integer): TIntegerArray;
Contributors: Wanted
Description: Returns all the slots where a dtm is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modification: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindInvItemsDTM(dtm: Integer): TIntegerArray;
var
  I, L: Integer;
  P: TPoint;
  B: TBox;
begin
  Result := [];
  for I := 0 to 27 do
    if (InvItemExists(I)) then
    begin
      B := GetItemBounds(I);
      if (FindDTM(dtm, P.X, P.Y, B.X1, B.Y1, B.X2, B.Y2)) then
      begin
        Inc(L);
        SetLength(Result, L);
        Result[L - 1] := I;
      end;
    end;
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountInvItemsDTM(dtm: Integer): Integer;
Contributors: Wanted
Description: Returns the number of times an inventory dtm is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modification: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountInvItemsDTM(dtm: Integer): Integer;
begin
  Result := Length(FindInvItemsDTM(dtm));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindInvItemsBMP(bmp, Tol: Integer): TIntegerArray;
Contributors: Wanted
Description: Returns all the slots where a bmp is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modification: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindInvItemsBMP(bmp, Tol: Integer): TIntegerArray;
var
  TPA: TPointArray;
  I, H: Integer;
begin
  Result := [];
  FindBitmapsTolerance(bmp, TPA, MIX1, MIY1, MIX2, MIY2, Tol);
  H := High(TPA);
  if (H < 0) then
    Exit;
  SetLength(Result, H + 1);
  for I := 0 to H do
    Result[I] := CordsToItemSlot(TPA[I]);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function CountInvItemsBMP(bmp, Tol: Integer): Integer;
Contributors: Wanted
Description: Returns the number of times an inventory bmp is found.
Date Created: December 8th, 2011. By Wanted. RS2 Build 688.
Last Modification: December 8th, 2011. By Wanted. RS2 Build 688.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function CountInvItemsBMP(bmp, Tol: Integer): Integer;
begin
  Result := Length(FindInvItemsBMP(bmp, Tol));
end;