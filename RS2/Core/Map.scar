{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                                  Map Routines
--------------------------------------------------------------------------------
 * function OnMM(X, Y: Integer): Boolean;
     By: Wanted
 * function FindMMColorTolerance(var X, Y: Integer; Color, Tol: Integer): Boolean;
     By: Wanted
 * function FindMMColorsTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
     By: Wanted
 * function GetCompassAngleRadians: Extended;
     By: Wanted
 * function GetCompassAngleDegress: Extended;
     By: Wanted
 * function FindFlag(var X, Y: Integer): Boolean;
     By: Wanted
 * function FlagExists: Boolean;
     By: Wanted;
 * function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
     By: Wanted
 * function GetFlagDistance: Extended;
     By: Wanted;
 * function FlagEx(Distance: Extended): Boolean;
     By: Wanted
 * function Flag: Boolean;
     By: Wanted
 * function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
     By: Wanted
 * function MouseFlag(X, Y, RX, RY: Integer): Boolean;
     By: Wanted
 * function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OnMM(X, Y: Integer): Boolean;
Contributors: Wanted
Description: Returns true if point is on the minimap.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OnMM(X, Y: Integer): Boolean;
begin
  Result := (DistanceEx(X, Y, MMCXe, MMCYe) < MMRDe);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorTolerance(var X, Y: Integer; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds color within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modification: October 28th, 2011. By Wanted. RS2 Build 671.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorTolerance(var X, Y: Integer; Color, Tol: Integer): Boolean;
begin
  Result := FindColorCircleTolerance(X, Y, Color, MMCX, MMCY, MMRD, Tol);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorsTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds colors within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modification: October 28th, 2011. By Wanted. RS2 Build 671.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorsTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
begin
  Result := FindColorsCircleTolerance(Points, Color, Tol, MMCXe, MMCYe, MMRDe);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleRadians: Extended;
Contributors: Anonymous, Wanted.
Description: Gets the compass angle in radians.
Date Created: August 6th, 2011. By Anonymous. RS2 Build 660.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleRadians: Extended;
var
  TPA: TPointArray;
  P: TPoint;
begin
  FindColors(TPA, 1911089, 527, 8, 559, 41);
  FilterPointsDist(TPA, 0, 18, 543, 25);
  P := MiddleTPA(TPA);
  Result := (ArcTan2(-(P.Y - 24), P.X - 543) - (Pi / 2));
  if (Result < 0) then
    Result := Result + (2 * Pi);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleDegrees: Extended;
Contributors: Anonymous, Wanted.
Description: Gets the compass angle in degrees.
Date Created: August 6th, 2011. By Anonymous. RS2 Build 660.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleDegrees: Extended;
begin
  Result := Degrees(GetCompassAngleRadians);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindFlag(var X, Y: Integer): Boolean;
Contributors: Wanted
Description: Returns true if flag exists and the cord of the lowest point.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindFlag(var X, Y: Integer): Boolean;
begin
  X := MMCX;
  Y := MMY2;
  Result := FindColorSpiral(X, Y, clFlag, MMX1, MMY1, MMX2, MMY2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagExists: Boolean;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagExists: Boolean;
var
  P: TPoint;
begin
  Result := FindMMColorTolerance(P.X, P.Y, clFlag, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
var
  P: TPoint;
begin
  if (not (FindFlag(P.X, P.Y))) then
  begin
    Result := 0;
    Exit;
  end;
  Result := DistanceEx(FromX, FromY, P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistance: Extended;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistance: Extended;
begin
  Result := GetFlagDistanceEx(MMCX, MMCY);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagEx(Distance: Extended): Boolean;
Contributors: Wanted
Description: Waits until your within Distance of flag. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagEx(Distance: Extended): Boolean;
var
  T: LongInt;
begin
  T := GetSystemTime + RR(25000, 30000);
  while (GetFlagDistance > Distance) do
  begin
    if (GetSystemTime > T) then
      Exit;
    WaitRR(100, 200);
  end;
  Result := True;
  if (Distance < 10.5) then
    if (IsRunning) then
      WaitRR(1050 - Round(Distance * 100), 1150 - Round(Distance * 100))
    else
      WaitRR(1350 - Round(Distance * 128), 1450 - Round(Distance * 128));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Flag: Boolean;
Contributors: Wanted
Description: Waits until you're done moving. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Flag: Boolean;
begin
  Result := FlagEx(0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does FlagEx.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: November 3rd, 2011. By Wanted. RS2 Build 674.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
var
  P: TPoint;
begin
  P := RRectanglePoint(X - RX, Y - RY, X + RX, Y + RY);
  if (PointInBox(Point(P.X, P.Y), IntToBox(MMCX, MMCY, MMCX + 3, MMCY + 3))) then
    Exit;
  if (not (OnMM(P.X, P.Y))) then
    Exit;
  Mouse(P.X, P.Y, 0, 0, True);
  if (not (WaitFunc(@FlagExists, True, 100, 200, 4000, 5000))) then
    Exit;
  Result := FlagEx(Distance);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlag(X, Y, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does Flag.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlag(X, Y, RX, RY: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, RX, RY, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: Turns a road TPA into a pie slice, finds the middle and offsets,
and finally walks to it. See the online manual and forums for help using correctly.
Date Created: November 3rd, 2011. By Wanted. RS2 Build 674.
Last Modification: November 3rd, 2011. By Wanted. RS2 Build 674.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
var
  ATPA: T2DPointArray;
  P: TPoint;
begin
  FilterPointsPie(TPA, SRad, ERad, SAng, EAng, MMCX, MMCY);
  ATPA := SplitTPA(TPA, 3);
  SortATPASize(ATPA, True);
  if (Length(ATPA) < 1) then
    Exit;
  TPA := ATPA[0];
  P := MiddleTPA(TPA);
  IncEx(P.X, XOffset);
  IncEx(P.Y, YOffset);
  Result := MouseFlagEx(P.X, P.Y, RX, RY, FlagD);
end;

//MMToMS
//MSToMM
//PercentColorMM
//GetCompassAngleDegrees/Radians
//IsMoving