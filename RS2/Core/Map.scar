{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                                   Runescape 2
                                  Map Routines
--------------------------------------------------------------------------------
 * function OnMM(X, Y: Integer): Boolean;
     By: Wanted
 * function MMToMS(MM: TPoint): TPoint;
     By: Anonymous
 * function FindMMColorTolerance(var X, Y: Integer; Color, Tol: Integer): Boolean;
     By: Wanted
 * function FindMMColorsTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
     By: Wanted
 * function GetCompassAngleRadians: Extended;
     By: Wanted
 * function GetCompassAngleDegress: Extended;
     By: Wanted
 * function MakeCompass(Angle: Extended): Boolean;
     By: Wanted
 * procedure SetAngle(Highest: Boolean);
     By: Naum
 * procedure ClickCompass(AdjustToHigh: Boolean);
     By: Wanted
 * function FindFlag(var X, Y: Integer): Boolean;
     By: Wanted
 * function FlagExists: Boolean;
     By: Wanted;
 * function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
     By: Wanted
 * function GetFlagDistance: Extended;
     By: Wanted;
 * function FlagEx(Distance: Extended): Boolean;
     By: Wanted
 * function Flag: Boolean;
     By: Wanted
 * function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
     By: Wanted
 * function MouseFlag(X, Y, RX, RY: Integer): Boolean;
     By: Wanted
 * function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
     By: Wanted
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function OnMM(X, Y: Integer): Boolean;
Contributors: Wanted
Description: Returns true if point is on the minimap.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function OnMM(X, Y: Integer): Boolean;
begin
  Result := (DistanceEx(X, Y, MMCXe, MMCYe) < MMRDe);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MMToMS(MM: TPoint): TPoint;
Contributors: Anonymous, Wanted.
Description: Returns true if point is on the minimap.
Date Created: August 7th, 2011. By Anonymous. RS2 Build 660.
Last Modification: November 18th, 2011. By Wanted. RS2 Build 679.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MMToMS(MM: TPoint): TPoint;
var
  X, Y: Integer;
  Dis: TPoint;
begin
  X := (MM.X - 647);
  Y := (MM.Y - 84);
  Dis := Point((MMCX - MM.X) * -1, (MMCY - MM.Y) * -1);
  Result := Point(Round((259.5 + X) + Dis.X * 10), Round((170.0 + Y)+ Dis.Y * 6.5));
  if (not (PointInBox(Result, Box(MSX1, MSY1, MSX2, MSY2)))) then
    Result := Point(0, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorTolerance(var X, Y: Integer; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds color within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modification: October 28th, 2011. By Wanted. RS2 Build 671.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorTolerance(var X, Y: Integer; Color, Tol: Integer): Boolean;
begin
  Result := FindColorCircleTolerance(X, Y, Color, MMCX, MMCY, MMRD, Tol);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindMMColorsTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
Contributors: Wanted
Description: Finds colors within minimap circle.
Date Created: October 28th, 2011. By Wanted. RS2 Build 671.
Last Modification: October 28th, 2011. By Wanted. RS2 Build 671.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindMMColorsTolerance(var Points: TPointArray; Color, Tol: Integer): Boolean;
begin
  Result := FindColorsCircleTolerance(Points, Color, Tol, MMCXe, MMCYe, MMRDe);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleRadians: Extended;
Contributors: Anonymous, Wanted.
Description: Gets the compass angle in radians.
Date Created: August 6th, 2011. By Anonymous. RS2 Build 660.
Last Modification: November 22nd, 2011. By Wanted. RS2 Build 682.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleRadians: Extended;
var
  TPA: TPointArray;
  P: TPoint;
begin
  FindColors(TPA, 65536, 528, 9, 559, 41);
  FilterPointsDist(TPA, 0, 16, 543.5, 25);
  P := MiddleTPA(TPA);
  Result := (ArcTan2(-(P.Y - 25), P.X - 542) - (Pi / 2));
  if (Result < 0) then
    Result := Result + (2 * Pi);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetCompassAngleDegrees: Extended;
Contributors: Anonymous, Wanted.
Description: Gets the compass angle in degrees.
Date Created: August 6th, 2011. By Anonymous. RS2 Build 660.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetCompassAngleDegrees: Extended;
begin
  Result := Degrees(GetCompassAngleRadians);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MakeCompass(Angle: Extended): Boolean;
Contributors: Wanted, Anonymous.
Description: Rotates the compass using the arrow keys to the desired angle.
Date Created: November 4th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MakeCompass(Angle: Extended): Boolean;
var
  InitialAngle, DesiredAngle, CurrentAngle: Extended;
  T: LongInt;
  Left: Boolean;
begin
  Result := False;
  InitialAngle := GetCompassAngleDegrees;
  if (InitialAngle < 0) then
    Exit;
  DesiredAngle := FixD(Angle);
  if ((MinE(Abs(InitialAngle - DesiredAngle), MinE(Abs(InitialAngle - (DesiredAngle + 360.0)), Abs((InitialAngle + 360.0) - DesiredAngle)))) <= 7.0) then
  begin
    Result := True;
    Exit;
  end;
  Left := (Round((360 - InitialAngle) + DesiredAngle) mod 360 <= Round((InitialAngle + 360) - DesiredAngle) mod 360);
  KeyDown((Integer(not Left) * 2) + 37);
  T := GetSystemTime + RR(12000, 14000);
  repeat
    Wait(1);
    CurrentAngle := GetCompassAngleDegrees;
    Result := (MinE(Abs(CurrentAngle - DesiredAngle), MinE(Abs(CurrentAngle - (DesiredAngle + 360)), Abs((CurrentAngle + 360) - DesiredAngle))) <= 7.0);
    if (Result) then
      Break;
  until (GetSystemTime > T);
  KeyUp((Integer(not Left) * 2) + 37);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure SetAngle(Highest: Boolean);
Contributors: Naum, Anonymous, Wanted.
Description: Tilts the camera angle.
Date Created: August 6th, 2011. By Naum. RS2 Build 660.
Last Modification: November 4th, 2011. By Wanted. RS2 Build 675.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure SetAngle(Highest: Boolean);
begin
  KeyDown((Integer(not (Highest)) * 2) + 38);
  WaitRR(1000, 1500);
  KeyUp((Integer(not Highest) * 2) + 38);
  WaitRR(400, 600);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
procedure ClickCompass(AdjustToHigh: Boolean);
Contributors: Wanted, Anonymous.
Description: Clicks to face north and then tilts the camera angle if desired.
Date Created: November 4th, 2011. By Wanted. RS2 Build 675.
Last Modification: November 11th, 2011. By Wanted. RS2 Build 677.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

procedure ClickCompass(AdjustToHigh: Boolean);
begin
  repeat
    if (not ((InRange(Round(GetCompassAngleDegrees), 7, 353)))) then
      Break;
    case Random(10) of
      0: begin
           MouseCircle(18, 543, 25, ClickRight);
           if (not (ChooseOptionMulti(['ace', 'orth']))) then
           Exit;
         end;
    else
      MouseCircle(18, 543, 25, ClickLeft);
    end;
  until (True);
  if (AdjustToHigh) then
    SetAngle(True);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FindFlag(var X, Y: Integer): Boolean;
Contributors: Wanted
Description: Returns true if flag exists and the cord of the lowest point.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FindFlag(var X, Y: Integer): Boolean;
begin
  X := MMCX;
  Y := MMY2;
  Result := FindColorSpiral(X, Y, clFlag, MMX1, MMY1, MMX2, MMY2);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagExists: Boolean;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagExists: Boolean;
var
  P: TPoint;
begin
  Result := FindMMColorTolerance(P.X, P.Y, clFlag, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistanceEx(FromX, FromY: Extended): Extended;
var
  P: TPoint;
begin
  Result := 0.0;
  if (not (FindFlag(P.X, P.Y))) then
  begin
    Result := 0;
    Exit;
  end;
  Result := DistanceEx(FromX, FromY, P.X, P.Y);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function GetFlagDistance: Extended;
Contributors: Wanted
Description: Returns true if flag exists.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function GetFlagDistance: Extended;
begin
  Result := GetFlagDistanceEx(MMCX, MMCY);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function FlagEx(Distance: Extended): Boolean;
Contributors: Wanted
Description: Waits until your within Distance of flag. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function FlagEx(Distance: Extended): Boolean;
var
  T: LongInt;
begin
  Result := False;
  T := GetSystemTime + RR(25000, 30000);
  while (GetFlagDistance > Distance) do
  begin
    if (GetSystemTime > T) then
      Exit;
    WaitRR(100, 200);
  end;
  Result := True;
  if (Distance < 10.5) then
    if (IsRunning) then
      WaitRR(1050 - Round(Distance * 100), 1150 - Round(Distance * 100))
    else
      WaitRR(1350 - Round(Distance * 128), 1450 - Round(Distance * 128));
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function Flag: Boolean;
Contributors: Wanted
Description: Waits until you're done moving. Returns true if it didn't time out.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function Flag: Boolean;
begin
  Result := FlagEx(0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does FlagEx.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: November 21st, 2011. By Wanted. RS2 Build 681.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlagEx(X, Y, RX, RY: Integer; Distance: Extended): Boolean;
var
  P: TPoint;
begin
  Result := False;
  P := RRectanglePoint(X - RX, Y - RY, X + RX, Y + RY);
  if (PointInBox(Point(P.X, P.Y), IntToBox(MMCX, MMCY, MMCX + 3, MMCY + 3))) then
    Exit;
  if (not (OnMM(P.X, P.Y))) then
    Exit;
  Mouse(P.X, P.Y, 0, 0, True);
  if (not (WaitFunc(@FlagExists, True, 100, 200, 4000, 5000))) then
    Exit;
  Result := FlagEx(Distance);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function MouseFlag(X, Y, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: If on minimap clicks and then waits for flag to exist then does Flag.
Date Created: October 31st, 2011. By Wanted. RS2 Build 672.
Last Modification: October 31st, 2011. By Wanted. RS2 Build 672.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function MouseFlag(X, Y, RX, RY: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, RX, RY, 0);
end;

{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
Contributors: Wanted
Description: Turns a road TPA into a pie slice, finds the middle and offsets,
and finally walks to it. See the online manual and forums for help using correctly.
Date Created: November 3rd, 2011. By Wanted. RS2 Build 674.
Last Modification: November 3rd, 2011. By Wanted. RS2 Build 674.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

function RadarRoadWalk(var TPA: TPointArray; SRad, ERad, SAng, EAng, FlagD: Extended; XOffset, YOffset, RX, RY: Integer): Boolean;
var
  ATPA: T2DPointArray;
  P: TPoint;
begin
  Result := False;
  FilterPointsPie(TPA, SRad, ERad, SAng, EAng, MMCX, MMCY);
  ATPA := SplitTPA(TPA, 3);
  SortATPASize(ATPA, True);
  if (Length(ATPA) < 1) then
    Exit;
  TPA := ATPA[0];
  P := MiddleTPA(TPA);
  IncEx(P.X, XOffset);
  IncEx(P.Y, YOffset);
  Result := MouseFlagEx(P.X, P.Y, RX, RY, FlagD);
end;

//MMToMS
//MSToMM
//PercentColorMM
//GetCompassAngleDegrees/Radians
//IsMoving