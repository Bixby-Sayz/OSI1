{=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Official SCAR Include
                             MiniMap Function Testing
--------------------------------------------------------------------------------
 * procedure TestMiniMapFunctions;
   Last Modified: October 6th, 2012. By LordJashin. RS2 Build 735.                   
 * Instructions:
                1. Set the constants
                2. Run Test!
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=}

{$DEFINE RS2}
{$DEFINE SMART}
{$I ../../OSI.scar}
{$I ../../RS2/Misc/DebugSmart.scar}

const
  RS2_Username = 'Test'; // Set these constants before running!
  RS2_Password = 'Test';
  RS2_Member = False;    // Use Member's world?
  SMART_World = 11;      // What world do you want to go to?

// Do not include this file. Run it!

procedure SetupPlayers;                                  
begin 
  SetLength(Players, 1);
  with Players[0] do
    begin
      Login := RS2_Username;
      Pass  := RS2_Password;
      Member := RS2_Member;  
      WorldInfo:= [RS2_Member, SMART_World];
      Active := True;
    end;                                     
  SetupOSI;
  if not LoggedIn then
    Login;       
  wait(5000);
end;

procedure TestMiniMapFunctions;
var
  P: TPoint;                                          
  ATPA: T2DPointArray;
begin
  if OnMM(MMCX, MMCY) then OSI_WriteAndLog('OnMM: Works!') else OSI_WriteAndLog('OnMM: Failed!');
  if MMOnMS(Point(MMCX, MMCY)) then OSI_WriteAndLog('MMOnMS: MiniMap Point is on the MainScreen too!') else OSI_WriteAndLog('Couldn''t find MiniMap point on MainScreen or Failed!');
  P := MMToMSEx(Point(MMCX, MMCY), 30);
  OSI_WriteAndLog('MMToMSEx: Result: (' + IntToStr(P.X) + ', ' + IntToStr(P.Y) + ')');
  P := MMToMS(Point(MMCX, MMCY));
  OSI_WriteAndLog('MMToMS: Result: (' + IntToStr(P.X) + ', ' + IntToStr(P.Y) + ')');
  if not SmartEnabled(SMART_Client) then
    SmartSetEnabled(SMART_Client, True);                         
  SmartSetDebug(SMART_Client, True);  
  SetLength(ATPA, 2);
  ATPA[0] := MMsToMSs([Point(MMCX, MMCY), Point(MMCX + 5, MMCY + 5), Point(MMCX - 5, MMCY - 5)]);
  ATPA[1] := FilterMMPointsMS([Point(MSCX, MSCY),Point(MSCX + 10, MSCY - 10), Point(MSCX + 20, MSCY + 20)]);   
  SmartDebugATPABoundsEx(ATPA, True, False, True, True);
  OSI_WriteAndLog('MMsToMSs: SMART Debug TPA');  
  OSI_WriteAndLog('FilterMMPointsMS: SMART Debug TPA');
  OSI_WriteAndLog('GetCompassAngleRadians: Result: ' + FloatToStr(GetCompassAngleRadians));
  OSI_WriteAndLog('GetCompassAngleDegrees: Result: ' + FloatToStr(GetCompassAngleDegrees));
  if MakeCompass(30) then OSI_WriteAndLog('MakeCompass: Rotated To 30!') else OSI_WriteAndLog('MakeCompass: Didn''t Rotate to 30 or Failed!');
  SetAngle(True);
  OSI_WriteAndLog('SetAngle: Can set the angle to highest!');
  ClickCompass(false);
  OSI_WriteAndLog('ClickCompass: Clicked to face north!');
  // MMDots functions
  // RadarRoadWalk
  // Flag Functions :(
  // FindMMColorTol
  // FindMMColorTolEx           
  wait(5000);
  SmartClearDebug(SMART_Client);
  SmartSetDebug(SMART_Client, False);    
end;

begin
  SetupPlayers;               
  ClearDebug;    
  MoveMouse(0, 0);
  TestMiniMapFunctions;
end.